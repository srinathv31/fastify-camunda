import fp from "fastify-plugin";

/**
 * Full event log row schema matching the production database table.
 * This captures all required fields for comprehensive process tracking
 * and audit trails.
 */
export interface EventLogRow {
  // execution_id is a database PK (UUID auto-generated on insert) - NOT provided by application
  batch_id: string;
  traceability_id: string;
  application_id: string;

  // Process-level defaults
  target_system: string;
  originating_system: string;
  process_name: string;

  // Step-level metadata
  step: number;
  step_name: string;

  // Payloads (stored as JSON strings)
  business_action_request: string;
  business_action_response: string;
  identifiers: string;

  // Outcome details
  result: string;
  http_status_code?: number | null;
  http_method?: string | null;
  endpoint?: string | null;

  // Additional metadata
  metadata?: string | null;
  last_update_id?: string | null;
  execution_time?: number | null;
}

declare module "fastify" {
  interface FastifyInstance {
    /**
     * Write an entry to the event log. This function is safe to call
     * anywhere in your application. It is asynchronous but errors are
     * caught and logged internally.
     */
    eventLog(entry: EventLogRow): Promise<void>;
  }
}

export default fp(async (app) => {
  app.decorate("eventLog", async (entry: EventLogRow) => {
    try {
      // Insert event log entry. Note: execution_id is auto-generated by the database.
      await app.db.query(
        `INSERT INTO event_log (
          batch_id, traceability_id, application_id, target_system,
          originating_system, process_name, step, step_name,
          business_action_request, business_action_response, identifiers,
          result, http_status_code, http_method, endpoint,
          metadata, last_update_id, execution_time
        ) VALUES (
          @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9,
          @p10, @p11, @p12, @p13, @p14, @p15, @p16, @p17, @p18
        )`,
        [
          entry.batch_id,
          entry.traceability_id,
          entry.application_id,
          entry.target_system,
          entry.originating_system,
          entry.process_name,
          entry.step,
          entry.step_name,
          entry.business_action_request,
          entry.business_action_response,
          entry.identifiers,
          entry.result,
          entry.http_status_code ?? null,
          entry.http_method ?? null,
          entry.endpoint ?? null,
          entry.metadata ?? null,
          entry.last_update_id ?? null,
          entry.execution_time ?? null,
        ]
      );
      app.log.info({ entry }, "event logged");
    } catch (err) {
      app.log.error({ err, entry }, "failed to write event log");
    }
  });
});
